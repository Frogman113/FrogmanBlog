---
import { getAllEntriesWithTags, resolvePath } from "@lib/utils";
import RootPageIndex from "@components/RootPageIndex.astro";
import PageNavigation from "@components/PageNavigation.astro";
import type { CollectionEntry } from "astro:content";
import BlogCardButton from "@components/BlogCardButton.astro";
import { TAGS } from "@consts";
import BackToPrevious from "@components/BackToPrevious.astro";

export async function getStaticPaths({ paginate }: { paginate: any }) {
    const { entries, tags } = await getAllEntriesWithTags();

    return tags.flatMap((tag) => {
        const tagEntries = entries.filter((post) =>
            post.data.tags?.includes(tag),
        );
        return paginate(tagEntries, {
            params: { slug: tag },
            pageSize: TAGS.pageSize,
        });
    });
}

const { slug } = Astro.params;
const { page } = Astro.props;

const entries = page.data;

const groupedEntries: {
    collection: string;
    entries: CollectionEntry<"blog">[];
}[] = [];

for (const entry of entries) {
    groupedEntries.push({
        collection: "blog",
        entries: [entry as CollectionEntry<"blog">],
    });
}
---

<RootPageIndex title={`# ${slug}`}>
    <div class="animate">
        <BackToPrevious href={resolvePath("/tags", Astro.url.pathname)}
            >All tags</BackToPrevious
        >
    </div>
    {
        (
            <ul class="animate not-prose mb-12 flex flex-col gap-4">
                {groupedEntries.map((group) => (
                    <li>
                        <ul class="flex flex-col gap-4">
                            {group.entries.map((entry) => (
                                <li>
                                    <BlogCardButton
                                        entry={entry}
                                    />
                                </li>
                            ))}
                        </ul>
                    </li>
                ))}
            </ul>
        )
    }
    <PageNavigation page={page} />
</RootPageIndex>